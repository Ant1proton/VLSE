import java.math.BigInteger;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;

public class Main {

	public static void main(String[] args) throws Exception {
		
		Random random = new Random();
		String HMACKey = "123456789151cvadsvfv";
		
		int keywordsNum = 100;
		int[] fileNum = {100, 1000, 10000, 100000};
//		int[] fileNum = {10};
		
		
		String[] keywords = Data.keywordsGenerate(keywordsNum);
		
		double[] searchTime = new double[fileNum.length];
		double[] updateTime = new double[fileNum.length];
					
		for(int i = 0; i < fileNum.length; i++) {
			
			int ID_length = (int) Math.ceil(Math.log(fileNum[i])*1.0/Math.log(2));
			SSE sse = new  SSE(keywords, HMACKey, ID_length);
			Map<String, byte[]> DictW = sse.setup();
			
			
			double updatetime = 0.0;
			double searchtime = 0.0;
			
			String updateKeyword = keywords[random.nextInt(keywordsNum)];
			
//			System.out.println("updateKeyword:" + updateKeyword);

			String[] identities = Data.idsGenerate(fileNum[i]);
			
//			System.out.println("identitiy:");
			for(int j = 0; j < fileNum[i]; j++) {
				
				// running time of insertion
				double t1 = System.currentTimeMillis();
//				System.out.print(identities[j] + ";");
				DictW = sse.updateProcess(updateKeyword, identities[j], 1, DictW);
				updatetime = updatetime + System.currentTimeMillis() - t1;
			}
			
			
			String searchKeyword = updateKeyword;
			int N = 1;
			double t1 = System.currentTimeMillis();
			double t2 = 0;
			
			for(int j = 0; j < N; j++) {				
				 t2 = sse.searchProcess(searchKeyword, DictW);
				 t2 = t2 + 
			}
			searchTime[i] = (System.currentTimeMillis() - t1 - t2)/N;
			updateTime[i] = updatetime/fileNum[i];
			
			System.out.println("fileNum = " + fileNum[i] + ";search time:" + searchTime[i] + ";update time:" + updateTime[i]);
		}	
	}
}

